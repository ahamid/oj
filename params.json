{"name":"OJ","tagline":"A framework for writing zero-template, zero-html, zero-css web apps in pure JavaScript.","body":"### Welcome to OJ.\r\nOJ(S) (OJ.js || OpenJS || Orange Julius || whatever you like) is a framework upon which to build web applications in pure (sometimes functional) JavaScript. Currently, it's packaged for Node. So, either download:\r\n\r\n```\r\n$ cd ojs\r\n$ npm install\r\n$ grunt build\r\n```\r\n\r\nor install from npm\r\n\r\n```\r\n$ npm install ojs\r\n$ grunt build\r\n```\r\n\r\nThere are more than a few TODOs before OJ will deliver anything useful, but this is the core of the vision:\r\n\r\n```\r\n$ var div =  OJ.node.make('body').div({ value: 'Aloha! Ahoy! Hola! Prevet!' });\r\n$ div.table().row(1).column(1).span({ text: 'Ahoy, column 1, row 1!' });\r\n$ ...\r\n$ div.loginDialog({ pass: init, fail: div.loginDialog });\r\n```\r\n\r\nBasic HTML and CSS are fully encapsulated in strongly validated OJ classes. Complex forms, layouts and composites are abstracted into thin OJ classes which are extensible with mixins. Entire workflows are simplified into OJ structures which can be defined with just a few lines (or so) of JavaScript code. Layouts are configurable simply by clicking and dragging the form. Validation and data binding come for free.\r\n\r\nSome of the most complex work has already been done. The SQL Builder demo is complete, minus actual AJAX requests. A fully fledged wrapper around IndexedDb is in place. Objects are queryable using SQL-like semantics. Raw DOM nodes are wrapped and ready. Much has been done, but much more still remains to do.\r\n\r\n### TODO Priority 1\r\nThe core factory class is in place, but only SPAN and DIV have been implemented. TABLE is next, followed by INPUT (which will immediately spawn a factory subclass to handle input type: radio, checkbox, etc). SELECT (with child class OPTION) will be followed by the rest of the classic DOM Nodes.\r\n\r\n### TODO Priority 2\r\nA secondary factory will need to implement components. There's still some implementation specing to do on how to distinguish between abstract components (e.g. an array of checkboxes) vs. concrete controls (e.g. an Address composite).\r\n\r\n### TODO Priority 3\r\nA FORM factory is on the table, so to speak. Additional specification work is needed to define a data structure which can be implicitly cast into an OJ form, generating an ordered layout of controls and to facilitate real time data.\r\n\r\n### Support or Contact\r\nFeel like contributing? Wondering what in the sam hill I'm thinking? Challenge me to a duel; fork me; contact me; ignore me. Collaborate in real time [in my IDE of choice] (https://c9.io/somecallmechief/oj). \r\n\r\n### Licensing\r\nEverything I write is always Public Domain. Please take generously. ","google":"UA-41555099-1","note":"Don't delete this file! It's used internally to help with page regeneration."}