{"name":"OJ","tagline":"OJ is a framework for writing web components and templates in frothy CoffeeScript or pure JavaScript. OJ provides a mechanism to rapidly build web applications using well encapsulated, modular code that doesn't rely on string templating or partially baked web standards.","body":"## Welcome to OJ.\r\nOJ(S) (OJ.js || OpenJS || Orange Julius || whatever you like) is a framework upon which to build web applications in pure (sometimes functional) JavaScript.\r\n\r\nOJ is packaged for Node and Bower. Other options abound.\r\n* Bower `bower install --save ojs`\r\n* From NPM last stable `npm install --save ojs`\r\n* Clone from Git `git clone git@github.com:somecallmechief/oj.git`\r\n*\r\n\r\nThere are more than a few TODOs before OJ will fully deliver on its promise, but this is the API at the core of the vision:\r\n\r\n```coffee\r\ndiv = OJ.body.div()\r\n  .text \"Aloha! Ahoy! Hola! Prevet!\"\r\ncell11 = div.table()\r\n  .cell 1, 1\r\n  .text 'Ahoy, column 1, row 1!'\r\nspan = cell11.span().text 'Aloha! Ahoy! Hola! Prevet!'\r\n...\r\ndiv.loginDialog { pass: loadMainPage, fail: div.loginDialog }\r\n```coffee\r\ndiv = OJ.node.make \"body\"\r\n  .div()\r\n  .text \"Aloha! Ahoy! Hola! Prevet!\"\r\ncell11 = div.table()\r\n  .cell 1, 1\r\n  .text 'Ahoy, column 1, row 1!'\r\nspan = cell11.span().text 'Aloha! Ahoy! Hola! Prevet!'\r\n...\r\ndiv.loginDialog { pass: loadMainPage, fail: div.loginDialog }\r\n```\r\n\r\nOJ is written in CoffeeScript. The distribution folder has the complete CS and JS for the project.\r\nThe source folder includes CS, JS and source maps for each individual file.\r\nFeel free to use OJ in either flavor.\r\nWhile OJ probably doesn't have a lot of utility in the context of Node, I have made an effort to keep it Node-compatible--although there is absolutely no testing to this effect.\r\n\r\n###Semantics\r\n\r\nBy design, OJ handles the generation of unique element IDs for every DOM node automatically under the hood.\r\nThis provides faster lookups in the internal API and encourages you to reference nodes in memory as opposed to relying on \"truth in DOM\".\r\nFor example, while you might write something like the following in jQuery:\r\n\r\n```coffee\r\njQuery '#myHolaDiv'\r\n  .append '<div id=\"leavingDiv\">Leaving...</div>'\r\njQuery '#myHolaDiv'\r\n  .append '<div>Leaving......</div>'\r\njQuery '#myHolaDiv'\r\n  .append '<div id=\"goneDiv\">Gone</div>'\r\n```\r\n\r\nAnd at some point later fetch the node from the DOM:\r\n\r\n```coffee\r\nleaving = jQuery '#leavingDiv'\r\n  .hide();\r\n```\r\n\r\nIn OJ, this is generally discouraged. Node lookups by ID are possible (if you maintain a reference to the ID),\r\nbut it is usually better to chain in memory, preserving a reference to the object:\r\n\r\n```coffee\r\nmyHolaDiv = OJ.nodes.div();\r\nmyHolaDiv.div()\r\n  .text 'Leaving...'\r\nmyHolaDiv.div()\r\n  .text 'Leaving......'\r\nmyHolaDiv.div()\r\n  .text 'Gone'\r\n```\r\n\r\nWhile frameworks like jQuery make it easy to inject anything the DOM, out of the box the framework does not encourage you to compose good HTML.\r\nIn jQuery every node wrapper is a generic DOM node with the same sets of properties and methods as every other DOM node.\r\nIn OJ, every node wrapper represents a specific type of DOM node (e.g. DIV, SPAN, TABLE) with a subset of the generic utility methods\r\nthat you might get from the jQuery API but also a highly constrained, strongly validated superset of methods\r\nthat are specific to the type of the node. For example, nothing (apart from reason) prevents one from writing this in jQuery:\r\n\r\n```coffee\r\ntable = jQuery '<table></table>'\r\ndiv = jQuery '<div></div>'\r\ntable.append div\r\n```\r\n\r\nIn OJ, the div method does not exist on the table class and thus will generate an exception:\r\n\r\n```coffee\r\ntable = OJ.nodes.table()\r\ntable.div() #throws new TypeError: Object [object global] has no method 'div'\r\n```\r\n\r\nThis does come at the cost of a learning curve, but the exceptions that OJ will generate for you are intended to ferret out mistakes\r\nthat will never make their way into Production code.\r\nWhile still runtime exceptions, you will see these immediately--the first time you run the code or unit tests;\r\nand within a very short time will disappear completely.\r\nJust as the Promise pattern enables you to write code that doesn't care about the actual order of operations,\r\nfreeing you to focus only on the sequence of logic, I think OJ enables a style of development free from worrying about the minutia\r\nof the DOM in order to focus more on the UI/UX you want to deliver.\r\n\r\n##State of the Project\r\n\r\nThe Dream: Basic HTML and CSS are fully encapsulated in strongly validated OJ classes.\r\nComplex forms, layouts and composites are abstracted into thin OJ classes which are extensible with mixins.\r\nEntire workflows are simplified into OJ structures which can be defined with just a few lines (or so) of JavaScript code.\r\nLayouts are configurable simply by clicking and dragging the form. Validation and data binding come for free.\r\n\r\n~~The Reality: Some of the most complex work has already been done. The SQL Builder demo is complete, minus actual AJAX requests. A fully fledged wrapper around IndexedDb is in place. Objects are queryable using SQL-like semantics. Raw DOM nodes are wrapped and ready. Much has been done, but much more still remains to do.~~\r\n\r\n~~### TODO Priority 1 v0.2.0~~ Complete\r\n~~The core factory class is in place, but only SPAN and DIV have been implemented. TABLE is next, followed by INPUT (which will immediately spawn a factory subclass to handle input type: radio, checkbox, etc). SELECT (with child class OPTION) will be followed by the rest of the classic DOM Nodes.~~\r\n\r\nAs of v0.2.0, the entire library has been refactored to CoffeeScript. Anything non-essential to the DOM framework has been archived (the source is still included in the project under /src/archive).\r\nAll standard nodes are supported: div, span, input, table, fieldset, p, b, br, ol, ul, li, select, option and more\r\nUnit tests are in place and expanding to prove out all of the new nodes.\r\n\r\n### TODO Priority 2 v0.3.0\r\nA secondary factory will need to implement components. There's still some implementation specing to do on how to distinguish\r\nbetween abstract components (e.g. an array of checkboxes) vs. concrete controls (e.g. an Address composite).\r\n\r\n### TODO Priority 3 v0.4.0\r\nA FORM factory is on the table, so to speak. Additional specification work is needed to define a data structure\r\nwhich can be implicitly cast into an OJ form, generating an ordered layout of controls and to facilitate real time data.\r\n\r\n## Support or Contact\r\nFeel like contributing? Wondering what in the sam hill I'm thinking? Challenge me to a duel; fork me; contact me; ignore me.\r\nCollaborate in real time [in my IDE of choice] (https://c9.io/somecallmechief/oj).\r\n\r\n## Licensing\r\nEverything I write is always Public Domain. Please take generously.\r\n","google":"UA-41555099-1","note":"Don't delete this file! It's used internally to help with page regeneration."}